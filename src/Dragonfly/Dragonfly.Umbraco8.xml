<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dragonfly.Umbraco8</name>
    </assembly>
    <members>
        <member name="T:Dragonfly.UmbracoHelpers.ApiControllerHtmlHelper">
            <summary>
            Helpers related to Controllers
            </summary>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ApiControllerHtmlHelper.GetPartialViewHtml(System.Web.Http.Controllers.HttpControllerContext,System.String,System.Web.Mvc.ViewDataDictionary,System.Web.HttpContext)">
            <summary>
            Gets the HTML from a partial View from a Controller
            </summary>
            <param name="ThisControllerContext"></param>
            <param name="ViewName"></param>
            <param name="ViewData"></param>
            <param name="CurrentContext"></param>
            <returns></returns>
        </member>
        <member name="T:Dragonfly.UmbracoHelpers.ContentExtensions">
            <summary>
            Extension methods for Base models
            </summary>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.HasPropertyWithValue(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Checks if the model has a property and a value for the property
            </summary>
            <param name="Model">
            The <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/> to inspect
            </param>
            <param name="PropertyAlias">
            The Umbraco property alias on the <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/>
            </param>
            <returns>
            A value indicating whether or not the property exists on the <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/> and has a value
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafeString(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the string representation
            of the property or an empty string
            </summary>
            <param name="Content">
            The <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/> that should contain the property
            </param>
            <param name="PropertyAlias">
            The Umbraco property alias.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafeString(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.String)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the string representation
            of the property or the default value
            </summary>
            <param name="Content">
            The <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/> that should contain the property
            </param>
            <param name="PropertyAlias">
            The Umbraco property alias.
            </param>
            <param name="DefaultValue">
            The default value.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafeDateTime(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Gets a safe date time from content
            </summary>
            <param name="Content">
            The content.
            </param>
            <param name="PropertyAlias">
            The property alias.
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafeDateTime(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.DateTime)">
            <summary>
            Gets a safe date time from content
            </summary>
            <param name="Content">
            The content.
            </param>
            <param name="PropertyAlias">
            The property alias.
            </param>
            <param name="DefaultValue">
            The default value.
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafeGuid(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the Guid representation
            of the property or the default value
            </summary>
            <param name="Content">
            The <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/>.
            </param>
            <param name="PropertyAlias">
            The Umbraco property alias.
            </param>
            <returns>
            The <see cref="T:System.Guid"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafeGuid(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.Guid)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the Guid representation
            of the property or the default value
            </summary>
            <param name="Content">
            The <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/>.
            </param>
            <param name="PropertyAlias">
            The Umbraco property alias.
            </param>
            <param name="DefaultValue">
            The default Value.
            </param>
            <returns>
            The <see cref="T:System.Guid"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafeInt(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the string representation
            of the property or the default value of 0
            </summary>
            <param name="Content">
            The <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/>
            </param>
            <param name="PropertyAlias">
            The Umbraco property alias.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafeInt(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.Int32)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the string representation
            of the property or the default value of 0
            </summary>
            <param name="Content">
            The <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/>
            </param>
            <param name="PropertyAlias">
            The Umbraco property alias.
            </param>
            <param name="DefaultValue">
            The default Value.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafeBool(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the string representation
            of the property or the default value of false
            </summary>
            <param name="Content">
            The <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/>
            </param>
            <param name="PropertyAlias">
            The Umbraco property alias.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafeBool(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.Boolean)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the string representation
            of the property or the default value of false
            </summary>
            <param name="Content">
            The <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/>
            </param>
            <param name="PropertyAlias">
            The Umbraco property alias.
            </param>
            <param name="DefaultValue">
            The default Value.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafeHtmlString(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the <see cref="T:System.Web.IHtmlString"/> representation
            of the property or an empty <see cref="T:System.Web.IHtmlString"/>
            </summary>
            <param name="Content">
            The <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/> that should contain the property
            </param>
            <param name="PropertyAlias">
            The Umbraco property alias.
            </param>
            <returns>
            The <see cref="T:System.Web.IHtmlString"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafeHtmlString(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.String)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the <see cref="T:System.Web.IHtmlString"/> representation
            of the property or the default <see cref="T:System.Web.IHtmlString"/>
            </summary>
            <param name="Content">
            The <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/> that should contain the property
            </param>
            <param name="PropertyAlias">
            The Umbraco property alias
            </param>
            <param name="DefaultValue">
            The default value.
            </param>
            <returns>
            The <see cref="T:System.Web.IHtmlString"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafePropertyValue``1(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,``0)">
            <summary>
            Checks if a property exists and has a value, returns the default for the type if not 
            </summary>
            <param name="Content">Node to get the property value from</param>
            <param name="PropertyAlias">Alias of the property</param>
            <param name="DefaultIfNone">Value to return if missing from Node (default is the Type default - ex: 0, false, "", null, etc.)</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.ContentExtensions.GetSafeContent(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Gets a content Id from a content picker and renders it as <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/>.
            </summary>
            <param name="Content">
            The current <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/>.
            </param>
            <param name="PropertyAlias">
            The property alias.
            </param>
            <param name="Umbraco">
            The <see cref="T:Umbraco.Web.UmbracoHelper"/>.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/> from the content picker.
            </returns>
        </member>
        <member name="T:Dragonfly.UmbracoHelpers.Development">
            <summary>
            Helpers related to Templates, Node Paths, Udis, and Getting Site Pages.
            Also includes functions for manipulating HTML strings.
            </summary>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.GetTemplateAlias(System.Nullable{System.Int32})">
            <summary>
            Get the Alias of a template from its ID. If the Id is null or zero, "NONE" will be returned.
            </summary>
            <param name="TemplateId">
            The template id.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.GetSitePage(Umbraco.Web.UmbracoHelper,System.Int32,System.String)">
            <summary>
            Return the first descendant page in the site by its DocType
            </summary>
            <param name="UmbHelper">UmbracoHelper</param>
            <param name="SiteRootNodeId">ex: model.Site.Id</param>
            <param name="DoctypeAlias">Name of the Doctype to serach for</param>
            <returns>An IPublishedContent of the node, or NULL if not found. You can then cast to a strongly-typed model for the DocType (ex: new ContactUsPage(contactPage))</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.GetSitePages(Umbraco.Web.UmbracoHelper,System.Int32,System.String)">
            <summary>
            Returns all descendant pages in the site of a specified DocType
            </summary>
            <param name="UmbHelper">UmbracoHelper</param>
            <param name="SiteRootNodeId">ex: model.Site.Id</param>
            <param name="DoctypeAlias">Name of the Doctype to serach for</param>
            <returns>An IEnumerable&lt;IPublishedContent&gt; of the nodes, or empty list if not found.</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.NodePath(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Return a string representation of the path to the Node
            </summary>
            <param name="UmbContentNode">Node to Get a Path for</param>
            <param name="Separator">String to separate parts of the path</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.NodePath(Umbraco.Core.Models.IContent,System.String)">
            <summary>
            Return a string representation of the path to the Node
            </summary>
            <param name="UmbContentNode">Node to Get a Path for</param>
            <param name="Separator">String to separate parts of the path</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.NodePathFromPathIdsCsv(System.String,System.String)">
            <summary>
            Return a string representation of the path to the Node
            </summary>
            <param name="PathIdsCsv">Comma-separated list of NodeIds representing the Path</param>
            <param name="Separator">String to separate parts of the path</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.MediaPath(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Return a string representation of the path to the Node
            </summary>
            <param name="UmbMediaNode">Node to Get a Path for</param>
            <param name="Separator">String to separate parts of the path</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.MediaNodePathFromPathIdsCsv(System.String,System.String)">
            <summary>
            Return a string representation of the path to the Node
            </summary>
            <param name="PathIdsCsv">Comma-separated list of NodeIds representing the Path</param>
            <param name="Separator">String to separate parts of the path</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.ToUdiCsv(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.PublishedContent.IPublishedContent},System.String)">
            <summary>
            Converts a list of published content to a comma-separated string of UDI values suitable for using with the content service
            </summary>
            <param name="PubsEnum">A collection of IPublishedContent</param>
            <param name="UdiType">UDI Type to use (document, media, etc) (use 'Umbraco.Core.Constants.UdiEntityType.' to specify)
            If excluded, will try to use the DocTypeAlias to determine the UDI Type</param>
            <returns>A CSV string of UID values eg. umb://document/56c0f0ef0ac74b58ae1cce16db1476af,umb://document/5cbac9249ffa4f5ab4f5e0db1599a75b</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.ToUdi(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Converts an IPublishedContent to a UDI string suitable for using with the content service
            </summary>
            <param name="PublishedContent">Node to use</param>
            <param name="UdiType">UDI Type to use (document, media, etc) (use 'Umbraco.Core.Constants.UdiEntityType.' to specify)
            If excluded, will try to use the PublishedItemType to determine the UDI Type</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.ToUdiString(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String)">
            <summary>
            Converts an IPublishedContent to a UDI string suitable for using with the content service
            </summary>
            <param name="PublishedContent">Node to use</param>
            <param name="UdiType">UDI Type to use (document, media, etc) (use 'Umbraco.Core.Constants.UdiEntityType.' to specify)
            If excluded, will try to use the DocTypeAlias to determine the UDI Type</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.GetUdiType(Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Returns a string representation of the type for the Udi (ex: 'media' or 'document')
            </summary>
            <param name="PublishedContent">Node to get data for</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.HtmlIsValid(System.String)">
            <summary>
            Validates string as html
            </summary>
            <param name="OriginalHtml"></param>
            <returns>True if valid HTML, False if Invalid</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.HtmlIsValid(System.String,System.Collections.Generic.IEnumerable{HtmlAgilityPack.HtmlParseError}@)">
            <summary>
            Validates string as html, returns errors
            </summary>
            <param name="OriginalHtml"></param>
            <param name="ValidationErrors">Variable of type IEnumerable&lt;HtmlParseError&gt;</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.StripScripts(System.String,System.String)">
            <summary>
            Removes all &lt;script&gt; tags from HTML
            </summary>
            <param name="OriginalHtml"></param>
            <param name="ReplaceWith">optional - text or HTML to replace the script tag with</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.StripScripts(System.Web.IHtmlString,System.String)">
            <summary>
            Removes all &lt;script&gt; tags from HTML
            </summary>
            <param name="OriginalHtml"></param>
            <param name="ReplaceWith">optional - text or HTML to replace the script tag with</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.StripIframes(System.String,System.String)">
            <summary>
            Removes all &lt;iframe&gt; tags from HTML
            </summary>
            <param name="OriginalHtml"></param>
            <param name="ReplaceWith">optional - text or HTML to replace the script tag with</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.StripIframes(System.Web.IHtmlString,System.String)">
            <summary>
            Removes all &lt;iframe&gt; tags from HTML
            </summary>
            <param name="OriginalHtml"></param>
            <param name="ReplaceWith">optional - text or HTML to replace the script tag with</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.StripParagraphTags(System.String,System.Boolean)">
            <summary>
            Removes all &lt;p&gt; tags from HTML
            </summary>
            <param name="OriginalHtml"></param>
            <param name="ReplaceWithBr">optional - if there are multiple paragraphs, will put a &lt;br/&gt; tag between them</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Development.StripParagraphTags(System.Web.IHtmlString,System.Boolean)">
            <summary>
            Removes all &lt;p&gt; tags from HTML
            </summary>
            <param name="OriginalHtml"></param>
            <param name="ReplaceWithBr">optional - if there are multiple paragraphs, will put a &lt;br/&gt; tag between them</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Dictionary.GetDictionaryOrPlaceholder(Umbraco.Web.UmbracoHelper,System.String,System.String)">
            <summary>
            Return a dictionary value or a placeholder representing the dictionary value which needs to be added
            </summary>
            <param name="Umbraco">(Extension of UmbracoHelper)</param>
            <param name="DictionaryKey">The dictionary key to lookup</param>
            <param name="DefaultValue">A default value to return instead of the placeholder if the key is not found (optional)</param>
            <returns>Either the display text, or a placeholder surrounded by [square brackets]</returns>
        </member>
        <member name="T:Dragonfly.UmbracoHelpers.Email">
            <summary>
            EmailMessage Helpers
            </summary>
        </member>
        <member name="T:Dragonfly.UmbracoHelpers.Email.MailVariables">
            <summary>
            Data structure for storing mail related items
            </summary>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Email.GetMailVariables(System.Int32)">
            <summary>
            Gets mail variables from EmailMessage document type
            </summary>
            <param name="NodeId">
            The node id of the EmailMessage
            </param>
            <returns>
            The <see cref="T:Dragonfly.UmbracoHelpers.Email.MailVariables"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Email.TrySendMail(Dragonfly.UmbracoHelpers.Email.MailVariables)">
            <summary>
            Attempts to send an email with mail variable package passed-in
            </summary>
            <param name="Package">
            The The <see cref="T:Dragonfly.UmbracoHelpers.Email.MailVariables"/> package.
            </param>
            <returns>
            <see cref="T:System.Boolean"/> indicating successful send.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Email.ReplacePlaceholders(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Boolean)">
            <summary>
            Using a dictionary of replacement keys with their corresponding values,
            replace the placeholders in the Template content. 
            </summary>
            <param name="TemplateContent">The email template content to process.</param>
            <param name="PlaceholdersData">The placeholder data Dictionary</param>
            <param name="TemplatePattern">The format pattern to indicate placeholders in the template content</param>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Email.AddImgAbsolutePath(System.String)">
            <summary>
            Add an absolute path to all the img tags in the html of an e-mail.
            </summary>
            <param name="Html"></param>
            <returns></returns>
        </member>
        <member name="T:Dragonfly.UmbracoHelpers.Macros">
            <summary>
            Provides Functionality useful for Macros
            </summary>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Macros.GetSafeParamObject(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Object)">
            <summary>
            Return an Object for a Macro Parameter
            </summary>
            <param name="MacrosCollection">ex: 'Model.MacroParameters'</param>
            <param name="Key">Parameter alias</param>
            <param name="DefaultNullValue"></param>
            <returns>Default null value - if provided, otherwise, NULL</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Macros.GetSafeParamString(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Return a String for a Macro Parameter
            </summary>
            <param name="MacrosCollection">ex: 'Model.MacroParameters'</param>
            <param name="Key">Parameter alias</param>
            <param name="DefaultNullValue">Default null value - if provided, otherwise, an Empty String</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Macros.GetSafeParamHtmlString(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Return an IHtmlString for a Macro Parameter
            </summary>
            <param name="MacrosCollection">ex: 'Model.MacroParameters'</param>
            <param name="Key">Parameter alias</param>
            <param name="DefaultNullValue">Default null value - if provided, otherwise, an Empty String</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Macros.GetSafeParamInt(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Int32)">
            <summary>
            Return an Int for a Macro Parameter
            </summary>
            <param name="MacrosCollection">ex: 'Model.MacroParameters'</param>
            <param name="Key">Parameter alias</param>
            <param name="DefaultNullValue"></param>
            <returns>Default null value - if provided, otherwise, 0</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Macros.GetSafeParamBool(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Boolean)">
            <summary>
            Return a Boolean for a Macro Parameter
            </summary>
            <remarks>Supports Numeric (1) and Text (True and true) values.</remarks>
            <param name="MacrosCollection">ex: 'Model.MacroParameters'</param>
            <param name="Key">Parameter alias</param>
            <param name="DefaultNullValue"></param>
            <returns>Default null value - if provided, otherwise, false</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Macros.GetSafeParamMultiContent(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,Umbraco.Web.UmbracoHelper)">
            <summary>
            Returns a collection of IPublishedContent from a MultiContentPicker Macro Parameter
            </summary>
            <param name="MacrosCollection">ex: 'Model.MacroParameters'</param>
            <param name="Key">Parameter alias</param>
            <param name="UmbracoHelper">ex: 'Umbraco'</param>
            <returns>IEnumerable&lt;IPublishedContent&gt;</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Macros.GetSafeParamContent(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,Umbraco.Web.UmbracoHelper)">
            <summary>
            Returns an IPublishedContent from a ContentPicker Macro Parameter
            </summary>
            <param name="MacrosCollection">ex: 'Model.MacroParameters'</param>
            <param name="Key">Parameter alias</param>
            <param name="UmbracoHelper">ex: 'Umbraco'</param>
            <returns>IPublishedContent or NULL</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Macros.GetSafeParamMultiMedia(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,Umbraco.Web.UmbracoHelper)">
            <summary>
            Returns a collection of IPublishedContent from a MultiMediaPicker Macro Parameter
            </summary>
            <param name="MacrosCollection">ex: 'Model.MacroParameters'</param>
            <param name="Key">Parameter alias</param>
            <param name="UmbracoHelper">ex: 'Umbraco'</param>
            <returns>IEnumerable&lt;IPublishedContent&gt;</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Macros.GetSafeParamMedia(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,Umbraco.Web.UmbracoHelper)">
            <summary>
            Returns an IPublishedContent from a MediaPicker Macro Parameter
            </summary>
            <param name="MacrosCollection">ex: 'Model.MacroParameters'</param>
            <param name="Key">Parameter alias</param>
            <param name="UmbracoHelper">ex: 'Umbraco'</param>
            <returns>IPublishedContent or NULL</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Macros.GetSafeParamMediaContent(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,Umbraco.Web.UmbracoHelper)">
            <summary>
            Returns an IPublishedContent from a MediaPicker Macro Parameter
            </summary>
            <param name="MacrosCollection">ex: 'Model.MacroParameters'</param>
            <param name="Key">Parameter alias</param>
            <param name="UmbracoHelper">ex: 'Umbraco'</param>
            <returns>IPublishedContent or NULL</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Mvc.IsRenderingInBackOffice(System.Uri)">
            <summary>
            Indicates whether the current request is coming from the Umbraco back-office. 
            Most useful in Macros to avoid 'no current PublishedContentRequest.' error.
            </summary>
            <param name="ThisRequestUrl">Pass in "Request.Url" or "this.Request.Url"</param>
            <returns>TRUE if it is a back-office request, FALSE if not</returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Mvc.RedirectToNewWindow(System.Web.HttpResponse,System.String)">
            <summary>
            NOTE: This needs to be rendered (via @Html.Raw(...), etc.) since it relies upon script tags
            </summary>
            <param name="Response"></param>
            <param name="Url"></param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoHelpers.Relations.GetDistinctRelatedNodeIds(System.Int32,System.String)">
            <summary>
            Get a list of related node Ids with duplicates removed (esp. for a bi-directional relation)
            </summary>
            <param name="LookupNodeId">Id of node to get relations for</param>
            <param name="RelationAlias">If blank will check all relations</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoModels.DataTypes.MntpExtensions.GetSafeMntpContent(Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Web.UmbracoHelper,System.String,System.Boolean)">
            <summary>
            Creates a collection of <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/> of either content or media based on values saved by an Umbraco MultiNodeTree Picker DataType
            </summary>
            <param name="Content">
            The <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/>
            </param>
            <param name="umbraco">
            The <see cref="T:Umbraco.Web.UmbracoHelper"/>
            </param>
            <param name="UmbHelper"></param>
            <param name="PropertyAlias">
            The Umbraco property Alias.
            </param>
            <param name="IsMedia">
            True or false indicating whether or not the property is an Umbraco media item
            </param>
            <returns>
            The collection of <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/>.
            </returns>
        </member>
        <member name="T:Dragonfly.UmbracoModels.Helpers.LinkHelper">
            <summary>
            Represents the link helper
            </summary>
        </member>
        <member name="F:Dragonfly.UmbracoModels.Helpers.LinkHelper.NavDisplayNameProperties">
            <summary>
            Property aliases to use for the Nav Display Name (in ascending order of Priority)
            </summary>
        </member>
        <member name="T:Dragonfly.UmbracoModels.Helpers.LinkHelper.ChangedLinkTierEventHandler">
            <summary>
            The changed link tier event handler.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="arg">
            The arg.
            </param>
        </member>
        <member name="E:Dragonfly.UmbracoModels.Helpers.LinkHelper.AddingTier">
            <summary>
            The adding tier.
            </summary>
        </member>
        <member name="M:Dragonfly.UmbracoModels.Helpers.LinkHelper.BuildLinkTier(Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Builds a <see cref="T:Dragonfly.UmbracoModels.ILinkTier"/> (Set the "NavDisplayNameProperties" property on the LinkHelper before calling)
            </summary>
            <param name="TierContentItem">The <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/> "tier" item (the parent tier)</param>
            <param name="CurrentContent">The CurrentContent <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/> in the recursion</param>
            <param name="ExcludeDocumentTypes">A collection of document type aliases to exclude</param>
            <param name="TierLevel">The starting "tier" level. Note this is the Umbraco node level</param>
            <param name="MaxLevel">The max "tier" level. Note this is the Umbraco node level</param>
            <param name="IncludeContentWithoutTemplate">True or false indicating whether or not to include content that does not have an associated template</param>
            <returns>the <see cref="T:Dragonfly.UmbracoModels.ILinkTier"/></returns>
        </member>
        <member name="M:Dragonfly.UmbracoModels.Helpers.LinkHelper.BuildBreadCrumb(System.Int32,Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Constructs a breadcrumb menu  (Set the "NavDisplayNameProperties" property on the LinkHelper before calling)
            </summary>
            <param name="StopLevel">The "top" level at which the recursion should quit</param>
            <param name="CurrentContent">The CurrentContent content</param>
            <returns>List of <see cref="T:Dragonfly.UmbracoModels.Link" /></returns>
        </member>
        <member name="M:Dragonfly.UmbracoModels.Helpers.LinkHelper.BuildBreadCrumb(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,System.Int32,System.Int32)">
            <summary>
            Constructs a breadcrumb menu  (Set the 'NavDisplayNameProperties' property on the LinkHelper before calling)
            </summary>
            <param name="CurrentContent">The content for which the breadcrumbs will be created</param>
            <param name="LinkTextProperty">Property to retrieve Text for the link. If the property doesn't exist or is blank, it will revert to using data in the 'NavDisplayNameProperties' property</param>
            <param name="MinLevel">The "top" level at which the recursion should quit (default = 1 : site root)</param>
            <param name="MaxLevel">The "bottom" level of parent pages which will be included in the menu (default = 0 : no limit, will include the current page)</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoModels.Helpers.LinkHelper.ContentNodeToLink(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.Boolean,System.String)">
            <summary>
            Converts a Content Node to an ILink (Set the 'NavDisplayNameProperties' property on the LinkHelper before calling)
            </summary>
            <param name="ContentNode"></param>
            <param name="IsMedia"></param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoModels.Helpers.LinkHelper.GetNavDisplayName(Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Uses the values in the 'NavDisplayNameProperties' property to select the best name for the nav display
            </summary>
            <param name="Content"></param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoModels.Helpers.LinkHelper.ContentHasTemplate(Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Quick fix to all for checking if a content item has a template
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/></param>
            <returns>True or false indicating whether or not the content has an associated template selected</returns>
        </member>
        <member name="T:Dragonfly.UmbracoModels.Helpers.AddingLinkTierEventArgs">
            <summary>
            The link tier event args.
            </summary>
        </member>
        <member name="M:Dragonfly.UmbracoModels.Helpers.AddingLinkTierEventArgs.#ctor(Dragonfly.UmbracoModels.ILinkTier,Dragonfly.UmbracoModels.ILinkTier)">
            <summary>
            Initializes a new instance of the <see cref="T:Dragonfly.UmbracoModels.Helpers.AddingLinkTierEventArgs"/> class.
            </summary>
            <param name="root">
            The root (base link tier)
            </param>
            <param name="adding">
            The modified value - generally an addition or 
            </param>
        </member>
        <member name="P:Dragonfly.UmbracoModels.Helpers.AddingLinkTierEventArgs.Root">
            <summary>
            Gets or sets the root link tier.
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.Helpers.AddingLinkTierEventArgs.Adding">
            <summary>
            Gets or sets the adding.
            </summary>
        </member>
        <member name="M:Dragonfly.UmbracoModels.Helpers.MediaHelper.PropertyValueToSafeImage(System.Object,Umbraco.Web.UmbracoHelper,Dragonfly.UmbracoModels.IMediaImage)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the <see cref="!:IImage"/> representation
            of the property or the default <see cref="T:Dragonfly.UmbracoModels.IMediaImage"/>
            </summary>
            <param name="PropValue">
            The Property Value
            </param>
            <param name="Umbraco">
            The <see cref="T:Umbraco.Web.UmbracoHelper"/>
            </param>
            <param name="DefaultImage">
            The default image.
            </param>
            <returns>
            The <see cref="T:Dragonfly.UmbracoModels.IMediaImage"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoModels.Helpers.MediaHelper.GetMediaImages(Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Web.UmbracoHelper,System.String)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the <see cref="T:Dragonfly.UmbracoModels.IMediaImage"/> representation
            of the property or the default <see cref="T:Dragonfly.UmbracoModels.IMediaImage"/>s
            </summary>
            <param name="content">
            The content which has the media picker property
            </param>
            <param name="umbraco">
            The <see cref="T:Umbraco.Web.UmbracoHelper"/>
            </param>
            <param name="propertyAlias">
            The property alias of the media picker
            </param>
            <param name="defaultImage">
            A default image to return if there are no results
            </param>
            <returns>
            A collection of <see cref="T:Dragonfly.UmbracoModels.IMediaImage"/>.
            </returns>
        </member>
        <member name="T:Dragonfly.UmbracoModels.MediaExtensions">
            <summary>
            Extensions to IMediaFile and IMediaImage
            </summary>
        </member>
        <member name="M:Dragonfly.UmbracoModels.MediaExtensions.ToIMediaFile(Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Utility extension to convert <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/> to an <see cref="T:Dragonfly.UmbracoModels.MediaFile"/>
            </summary>
            <param name="MediaContent">The <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/></param>
            <returns>
            The <see cref="T:Dragonfly.UmbracoModels.MediaFile"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoModels.MediaExtensions.ToIMediaFiles(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.PublishedContent.IPublishedContent})">
            <summary>
            Creates a collection of <see cref="T:Dragonfly.UmbracoModels.MediaFile"/> from a list of <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/> (media)
            </summary>
            <param name="Contents">
            The collection of <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/>
            </param>
            <returns>
            The collection of <see cref="T:Dragonfly.UmbracoModels.MediaFile"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoModels.MediaExtensions.ToIMediaImages(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.PublishedContent.IPublishedContent})">
            <summary>
            Creates a collection of <see cref="T:Dragonfly.UmbracoModels.MediaImage"/> from a list of <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/> (media)
            </summary>
            <param name="Contents">
            The collection of <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/>
            </param>
            <returns>
            The collection of <see cref="T:Dragonfly.UmbracoModels.MediaImage"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoModels.MediaExtensions.ToIMediaImage(Umbraco.Core.Models.PublishedContent.IPublishedContent)">
            <summary>
            Utility extension to convert <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/> to an <see cref="T:Dragonfly.UmbracoModels.MediaImage"/>
            </summary>
            <returns>
            The <see cref="T:Dragonfly.UmbracoModels.MediaImage"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoModels.MediaExtensions.ImgUrlToImage(System.String,System.String)">
            <summary>
            Create a <see cref="T:Dragonfly.UmbracoModels.MediaImage"/> from an Image URL
            </summary>
            <returns>
            The <see cref="T:Dragonfly.UmbracoModels.MediaImage"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoModels.MediaExtensions.AddFileInfoFromServer(Dragonfly.UmbracoModels.MediaImage)">
            <summary>
            Adds Bytes, Extension, and Dimensions information from the actual file
            </summary>
            <param name="MediaImage"></param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoModels.MediaExtensions.GetSafeMediaFile(Umbraco.Core.Models.PublishedContent.IPublishedContent,Umbraco.Web.UmbracoHelper,System.String)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the <see cref="T:Dragonfly.UmbracoModels.IMediaFile"/> representation
            of the property or the default <see cref="T:Dragonfly.UmbracoModels.IMediaFile"/>
            </summary>
            <param name="Content">
            The <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/>
            </param>
            <param name="Umbraco">
            The <see cref="T:Umbraco.Web.UmbracoHelper"/>
            </param>
            <param name="PropertyAlias">
            The Umbraco property alias.
            </param>
            <param name="defaultImage">
            The default image.
            </param>
            <returns>
            The <see cref="T:Dragonfly.UmbracoModels.IMediaFile"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoModels.MediaExtensions.GetSafeMediaFiles(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,Umbraco.Web.UmbracoHelper)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the <see cref="T:Dragonfly.UmbracoModels.IMediaFile"/> representation
            of the property or the default <see cref="T:Dragonfly.UmbracoModels.IMediaFile"/>s
            </summary>
            <param name="Content">
            The content which has the media picker property
            </param>
            <param name="Umbraco">
            The <see cref="T:Umbraco.Web.UmbracoHelper"/>
            </param>
            <param name="PropertyAlias">
            The property alias of the media picker
            </param>
            <param name="defaultFile">
            The default File.
            </param>
            <returns>
            A collection of <see cref="T:Dragonfly.UmbracoModels.IMediaFile"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoModels.MediaExtensions.GetSafeMediaFiles(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,Umbraco.Web.UmbracoHelper,Dragonfly.UmbracoModels.IMediaFile)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the <see cref="T:Dragonfly.UmbracoModels.IMediaFile"/> representation
            of the property or the default <see cref="T:Dragonfly.UmbracoModels.IMediaFile"/>s
            </summary>
            <param name="Content">
            The content which has the media picker property
            </param>
            <param name="Umbraco">
            The <see cref="T:Umbraco.Web.UmbracoHelper"/>
            </param>
            <param name="PropertyAlias">
            The property alias of the media picker
            </param>
            <param name="DefaultFile">
            The default File.
            </param>
            <returns>
            A collection of <see cref="T:Dragonfly.UmbracoModels.IMediaFile"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoModels.MediaExtensions.GetSafeImage(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,Umbraco.Web.UmbracoHelper)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the <see cref="!:IImage"/> representation
            of the property or the default <see cref="T:Dragonfly.UmbracoModels.IMediaImage"/>
            </summary>
            <param name="Content">
            The <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/>
            </param>
            <param name="Umbraco">
            The <see cref="T:Umbraco.Web.UmbracoHelper"/>
            </param>
            <param name="PropertyAlias">
            The Umbraco property alias.
            </param>
            <returns>
            The <see cref="T:Dragonfly.UmbracoModels.IMediaImage"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoModels.MediaExtensions.GetSafeImage(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,Umbraco.Web.UmbracoHelper,Dragonfly.UmbracoModels.IMediaImage)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the <see cref="!:IImage"/> representation
            of the property or the default <see cref="T:Dragonfly.UmbracoModels.IMediaImage"/>
            </summary>
            <param name="Content">
            The <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/>
            </param>
            <param name="Umbraco">
            The <see cref="T:Umbraco.Web.UmbracoHelper"/>
            </param>
            <param name="PropertyAlias">
            The Umbraco property alias.
            </param>
            <param name="DefaultImage">
            The default image.
            </param>
            <returns>
            The <see cref="T:Dragonfly.UmbracoModels.IMediaImage"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoModels.MediaExtensions.GetSafeImages(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,Umbraco.Web.UmbracoHelper,Dragonfly.UmbracoModels.IMediaImage)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the <see cref="T:Dragonfly.UmbracoModels.IMediaImage"/> representation
            of the property or the default <see cref="T:Dragonfly.UmbracoModels.IMediaImage"/>s
            </summary>
            <param name="Content">
            The content which has the media picker property
            </param>
            <param name="Umbraco">
            The <see cref="T:Umbraco.Web.UmbracoHelper"/>
            </param>
            <param name="PropertyAlias">
            The property alias of the media picker
            </param>
            <param name="DefaultImage">
            A default image to return if there are no results
            </param>
            <returns>
            A collection of <see cref="T:Dragonfly.UmbracoModels.IMediaImage"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoModels.MediaExtensions.GetSafeImages(Umbraco.Core.Models.PublishedContent.IPublishedContent,System.String,Umbraco.Web.UmbracoHelper)">
            <summary>
            Checks if the model has a property and a value for the property and returns either the <see cref="T:Dragonfly.UmbracoModels.IMediaImage"/> representation
            of the property or the default <see cref="T:Dragonfly.UmbracoModels.IMediaImage"/>s
            </summary>
            <param name="Content">
            The content which has the media picker property
            </param>
            <param name="Umbraco">
            The <see cref="T:Umbraco.Web.UmbracoHelper"/>
            </param>
            <param name="PropertyAlias">
            The property alias of the media picker
            </param>
            <param name="defaultImage">
            A default image to return if there are no results
            </param>
            <returns>
            A collection of <see cref="T:Dragonfly.UmbracoModels.IMediaImage"/>.
            </returns>
        </member>
        <member name="M:Dragonfly.UmbracoModels.MediaExtensions.AbsoluteUrl(Dragonfly.UmbracoModels.IMediaImage,System.String)">
            <summary>
            Gets the full url, including domain.
            </summary>
            <param name="AlternateDomain">If blank, will use the current hostname.</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoModels.MediaExtensions.GetCropUrl(Dragonfly.UmbracoModels.IMediaImage,System.Int32,System.Int32)">
            <summary>
            Returns a Url to crop the image
            </summary>
            <param name="Width">Width in pixels</param>
            <param name="Height">Height in pixels</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoModels.MediaExtensions.GetResizeUrl(Dragonfly.UmbracoModels.IMediaImage,System.Int32,System.Int32,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Returns a url for a resized version
            </summary>
            <param name="Height">Pixel Height (use zero to exclude value)</param>
            <param name="Width">Pixel Width (use zero to exclude value)</param>
            <param name="BgColorForPadding">Hex code for color used to fill background, since there is no up-sizing. Example: "#FFFFFF" Exclude when only using one dimension for resizing</param>
            <param name="AdditionalParameters">List of Key/Value Pairs of additional ImageProcessor options</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoModels.MediaExtensions.GetResizeUrl(Dragonfly.UmbracoModels.IMediaImage,System.Int32,System.Int32,System.String)">
            <summary>
            Returns a url for a resized version
            </summary>
            <param name="Height">Pixel Height (use zero to exclude value)</param>
            <param name="Width">Pixel Width (use zero to exclude value)</param>
            <param name="BgColorForPadding">Hex code for color used to fill background, since there is no up-sizing. Example: "#FFFFFF"</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoModels.MediaExtensions.GetResizeUrl(Dragonfly.UmbracoModels.IMediaImage,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Returns a url for a resized version
            </summary>
            <param name="Height">Pixel Height (use zero to exclude value)</param>
            <param name="Width">Pixel Width (use zero to exclude value)</param>
            <param name="BgColorForPadding">Hex code for color used to fill background, since there is no up-sizing. Example: "#FFFFFF"</param>
            <param name="AdditionalParametersAsString">Separated string of Key/Value Pairs of additional ImageProcessor options</param>
            <returns></returns>
        </member>
        <member name="T:Dragonfly.UmbracoModels.IMediaFile">
            <summary>
            The MediaFile interface.
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.IMediaFile.Content">
            <summary>
            Gets or sets the <see cref="T:Umbraco.Core.Models.PublishedContent.IPublishedContent"/> that this image represents
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.IMediaFile.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.IMediaFile.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.IMediaFile.Url">
            <summary>
            Gets or sets the url.
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.IMediaFile.Bytes">
            <summary>
            Gets or sets the bytes.
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.IMediaFile.Extension">
            <summary>
            Gets or sets the extension.
            </summary>
        </member>
        <member name="T:Dragonfly.UmbracoModels.MediaFile">
            <summary>
            Represents a file.
            </summary>
        </member>
        <member name="T:Dragonfly.UmbracoModels.IMediaImage">
            <summary>
            Interface for a Media Image.
            </summary>
        </member>
        <member name="T:Dragonfly.UmbracoModels.MediaImage">
            <summary>
            Represents an image from the Media section of Umbraco
            </summary>
        </member>
        <member name="T:Dragonfly.UmbracoModels.MvcFakes.FakeHttpContext">
            <summary>
            Allows for 'Faking' a Context so that certain Http functions are available outside of normal usage
            </summary>
        </member>
        <member name="T:Dragonfly.UmbracoModels.ILink">
            <summary>
            Defines a hyperlink
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.ILink.ContentId">
            <summary>
            Gets or sets Umbraco content id if applicable
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.ILink.ContentNode">
            <summary>
            Gets or sets Umbraco content node, if applicable
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.ILink.ContentTypeAlias">
            <summary>
            Gets or sets the content type alias.
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.ILink.Title">
            <summary>
            Gets or sets title of the link
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.ILink.Url">
            <summary>
            Gets or sets Url of the link
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.ILink.Target">
            <summary>
            Gets or sets Target of the link
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.ILink.ElementId">
            <summary>
            Gets or sets id attribute for the link
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.ILink.CssClass">
            <summary>
            Gets or sets CSS class of the link
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.ILink.IsMedia">
            <summary>
            Is this a link to a media item?
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.ILink.MediaFile">
            <summary>
            If it is a media item, this is the media info
            </summary>
        </member>
        <member name="T:Dragonfly.UmbracoModels.Link">
            <summary>
            Represents a hyperlink
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.Link.ContentId">
            <summary>
            Gets or sets the Umbraco Content Id
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.Link.ContentNode">
            <summary>
            Gets or sets the content node.
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.Link.ContentTypeAlias">
            <summary>
            Gets or sets the content type alias.
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.Link.Title">
            <summary>
            Gets or sets the link title
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.Link.Url">
            <summary>
            Gets or sets the link Url
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.Link.Target">
            <summary>
            Gets or sets the link target
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.Link.ElementId">
            <summary>
            Gets or sets the link element id
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.Link.CssClass">
            <summary>
            Gets or sets the link's CSS class
            </summary>
        </member>
        <member name="M:Dragonfly.UmbracoModels.Link.AbsoluteUrl(System.String)">
            <summary>
            Gets the full url, including domain.
            </summary>
            <param name="AlternateDomain">If blank, will use the current hostname.</param>
            <returns></returns>
        </member>
        <member name="T:Dragonfly.UmbracoModels.ILinkTier">
            <summary>
            Defines a link tier
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.ILinkTier.Children">
            <summary>
            Gets or sets the children of the current tier
            </summary>
        </member>
        <member name="T:Dragonfly.UmbracoModels.LinkTier">
            <summary>
            Represents a link tier
            </summary>
        </member>
        <member name="M:Dragonfly.UmbracoModels.LinkTier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dragonfly.UmbracoModels.LinkTier"/> class.
            </summary>
        </member>
        <member name="P:Dragonfly.UmbracoModels.LinkTier.Children">
            <summary>
            Gets or sets the children <see cref="T:Dragonfly.UmbracoModels.ILinkTier"/>
            </summary>
        </member>
        <member name="M:Dragonfly.UmbracoServices.MediaFinderService.#ctor(Umbraco.Web.UmbracoHelper,Umbraco.Core.Logging.ILogger)">
            <summary>
            Service to retrieve Media Nodes via various search methods
            </summary>
            <param name="umbHelper">UmbracoHelper passed-in</param>
        </member>
        <member name="M:Dragonfly.UmbracoServices.MediaFinderService.GetAllSimpleMediaNodes">
            <summary>
            Gets all media nodes as SimpleMediaInfo
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoServices.MediaFinderService.GetAllSimpleMediaNodes(System.Int32)">
            <summary>
            Gets all media nodes as SimpleMediaInfo
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoServices.MediaFinderService.GetImageByName(System.String,System.Int32)">
            <summary>
            Lookup Media Image by Node Name
            </summary>
            <param name="ImageMediaName">Name to search for</param>
            <param name="StartNodeId">ID of MediaNode to limit search to descendants</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoServices.MediaFinderService.GetFolderByName(System.String,System.Int32)">
            <summary>
            Lookup Media Folder by Node Name
            </summary>
            <param name="FolderName">Name to search for</param>
            <param name="StartNodeId">ID of MediaNode to limit search to descendants</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoServices.MediaFinderService.GetFileByName(System.String,System.Int32)">
            <summary>
            Lookup Media File by Node Name
            </summary>
            <param name="FileMediaName">Name to search for</param>
            <param name="StartNodeId">ID of MediaNode to limit search to descendants</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoServices.MediaFinderService.GetMediaByName(System.String,System.Int32,System.String)">
            <summary>
            Lookup Media Node by Node Name
            </summary>
            <param name="MediaName">Name to search for</param>
            <param name="StartNodeId">ID of MediaNode to limit search to descendants</param>
            <param name="MediaTypeAlias">Alias of MediaType to return</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoServices.MediaFinderService.GetImageByFilePath(System.String,System.Int32)">
            <summary>
            Lookup Media Image by File Path
            </summary>
            <param name="MediaFilePath">File Path to search for</param>
            <param name="StartNodeId">ID of MediaNode to limit search to descendants</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoServices.MediaFinderService.GetFileByFilePath(System.String,System.Int32)">
            <summary>
            Lookup Media File by File Path
            </summary>
            <param name="MediaFilePath">File Path to search for</param>
            <param name="StartNodeId">ID of MediaNode to limit search to descendants</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoServices.MediaFinderService.GetMediaByFilePath(System.String,System.Int32,System.String)">
            <summary>
            Lookup Media Node by File Path
            </summary>
            <param name="MediaFilePath">File Path to search for</param>
            <param name="StartNodeId">ID of MediaNode to limit search to descendants</param>
            <param name="MediaTypeAlias">Alias of MediaType to return</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoServices.MediaFinderService.GetImageInfoByFilename(System.String,System.Int32)">
            <summary>
            Lookup Media Image by File Path
            </summary>
            <param name="MediaFilePath">File Path to search for</param>
            <param name="StartNodeId">ID of MediaNode to limit search to descendants</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoServices.MediaFinderService.GetFileInfoByFilename(System.String,System.Int32)">
            <summary>
            Lookup Media File by File Path
            </summary>
            <param name="MediaFilePath">File Path to search for</param>
            <param name="StartNodeId">ID of MediaNode to limit search to descendants</param>
            <returns></returns>
        </member>
        <member name="M:Dragonfly.UmbracoServices.MediaFinderService.GetMediaInfoByFilename(System.String,System.Int32,System.String)">
            <summary>
            Lookup Media Node by File Path
            </summary>
            <param name="MediaFilePath">File Path to search for</param>
            <param name="StartNodeId">ID of MediaNode to limit search to descendants</param>
            <param name="MediaTypeAlias">Alias of MediaType to return</param>
            <returns></returns>
        </member>
    </members>
</doc>
